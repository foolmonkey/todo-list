{"version":3,"sources":["Task.js","Tasklist.js","CompletedTask.js","CompletedList.js","Add.js","App.js","serviceWorker.js","index.js"],"names":["Task","checkbox","className","type","onClick","e","props","completeTask","id","value","inputfield","onChange","handleInput","onKeyDown","handleKeyDown","this","deleteButton","deleteTask","React","Component","Tasklist","tasks","map","task","i","key","CompletedTask","state","checked","uncompleteTask","defaultValue","setState","target","CompletedList","Add","addTask","App","completed","bind","items","splice","length","push","event","preventDefault","removed","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6870d31b.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Task extends React.Component {\n  render() {\n    const checkbox = (\n      <input\n        className=\"complete\"\n        type=\"checkbox\"\n        onClick={(e) =>\n          this.props.completeTask(this.props.id, this.props.value, e)\n        }\n      ></input>\n    );\n\n    const inputfield = (\n      <input\n        type=\"text\"\n        onChange={(e) => this.props.handleInput(this.props.id, e)}\n        onKeyDown={(e) =>\n          this.props.handleKeyDown(this.props.id, this.props.value, e)\n        }\n        value={this.props.value}\n      ></input>\n    );\n\n    const deleteButton = (\n      <button id=\"delete\" onClick={() => this.props.deleteTask(this.props.id)}>\n        Delete\n      </button>\n    );\n\n    return (\n      <div className=\"box new\">\n        {checkbox}\n        {inputfield}\n        {deleteButton}\n      </div>\n    );\n  }\n}\n\nexport default Task;\n","import React from \"react\";\nimport Task from \"./Task\";\n\n// display tasks from props\nclass Tasklist extends React.Component {\n  render() {\n    return this.props.tasks.map((task, i) => (\n      <Task\n        key={i}\n        id={i}\n        value={task}\n        handleInput={this.props.handleInput}\n        deleteTask={this.props.deleteTask}\n        handleKeyDown={this.props.handleKeyDown}\n        completeTask={this.props.completeTask}\n      ></Task>\n    ));\n  }\n}\n\nexport default Tasklist;\n","import React from \"react\";\n\nclass CompletedTask extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: this.props.value,\n    };\n  }\n\n  render() {\n    const checkbox = (\n      <input\n        className=\"complete\"\n        type=\"checkbox\"\n        checked\n        onChange={(e) =>\n          this.props.uncompleteTask(this.props.id, this.state.value, e)\n        }\n      ></input>\n    );\n\n    const inputfield = (\n      <input\n        className=\"strikethrough\"\n        type=\"text\"\n        defaultValue={this.props.value}\n        onChange={(e) => {\n          this.setState({ value: e.target.value });\n        }}\n      ></input>\n    );\n\n    return (\n      <div className=\"box doneoffset\">\n        {checkbox}\n        {inputfield}\n      </div>\n    );\n  }\n}\n\nexport default CompletedTask;\n","import React from \"react\";\nimport CompletedTask from \"./CompletedTask\";\n\n// display tasks from props\nclass CompletedList extends React.Component {\n  render() {\n    return this.props.tasks.map((task, i) => (\n      <CompletedTask\n        key={i}\n        id={i}\n        value={task}\n        uncompleteTask={this.props.uncompleteTask}\n      ></CompletedTask>\n    ));\n  }\n}\n\nexport default CompletedList;\n","import React from \"react\";\n\nclass Add extends React.Component {\n  render() {\n    return (\n      <div className=\"box\" id=\"bar\">\n        <button id=\"create\" onClick={this.props.addTask}>\n          Add a task\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Add;\n","import React from \"react\";\nimport Tasklist from \"./Tasklist\";\nimport CompletedList from \"./CompletedList\";\nimport Add from \"./Add\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tasks: [\"Edit this task!\"],\n      completed: [],\n    };\n\n    this.deleteTask = this.deleteTask.bind(this);\n    this.addTask = this.addTask.bind(this);\n    this.handleInput = this.handleInput.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.completeTask = this.completeTask.bind(this);\n    this.uncompleteTask = this.uncompleteTask.bind(this);\n  }\n\n  // deletes the task with the specified key\n  deleteTask(key) {\n    let items = this.state.tasks;\n    items.splice(key, 1);\n\n    this.setState({ tasks: items });\n\n    if (this.state.tasks.length < 1) {\n      this.setState({ tasks: [\"\"] });\n    }\n  }\n\n  // add an empty task to the end of the list\n  addTask() {\n    let items = this.state.tasks;\n    items.push(\"\");\n\n    this.setState({ tasks: items });\n  }\n\n  // controlled input field for task\n  handleInput(key, event) {\n    let items = this.state.tasks;\n    items[key] = event.target.value;\n    this.setState({ tasks: items });\n  }\n\n  // handles special keyDown events\n  handleKeyDown(key, value, event) {\n    // create new task on 'enter' key\n    if (event.key === \"Enter\") {\n      let items = this.state.tasks;\n      items.splice(key + 1, 0, \"\");\n\n      this.setState({ tasks: items });\n\n      // when field is empty, delete task on 'backspace' key\n    } else if (event.key === \"Backspace\" && value === \"\") {\n      this.deleteTask(key);\n    }\n  }\n\n  // Moves task to 'Completed Tasks'\n  completeTask(key, value, event) {\n    event.preventDefault();\n\n    if (value !== \"\") {\n      let items = this.state.completed;\n      items.push(value);\n\n      this.setState({ completed: items });\n\n      // remove from tasks\n      this.deleteTask(key);\n    }\n  }\n\n  // Moves task from 'Completed Tasks' to normal task list\n  uncompleteTask(key, value) {\n    let items = this.state.tasks;\n    items.push(value);\n\n    this.setState({ tasks: items });\n\n    // remove from completed tasks\n    let removed = this.state.completed;\n    removed.splice(key, 1);\n\n    this.setState({ completed: removed });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Add addTask={this.addTask}></Add>\n        <Tasklist\n          tasks={this.state.tasks}\n          deleteTask={this.deleteTask}\n          handleInput={this.handleInput}\n          handleKeyDown={this.handleKeyDown}\n          completeTask={this.completeTask}\n        ></Tasklist>\n\n        {this.state.completed.length > 0 && (\n          <div id=\"completed\">\n            <div className=\"box\" id=\"bar\">\n              <h2>Completed Tasks</h2>\n              <button\n                id=\"clear\"\n                onClick={() => {\n                  this.setState({ completed: [] });\n                }}\n              >\n                Clear\n              </button>\n            </div>\n            <CompletedList\n              tasks={this.state.completed}\n              uncompleteTask={this.uncompleteTask}\n            ></CompletedList>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}